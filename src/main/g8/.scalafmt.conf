# See: https://github.com/scalameta/scalafmt/tree/master/scalafmt-core/shared/src/main/scala/org/scalafmt/config

version = "3.5.2"
runner.dialect = "scala3"

align {
  allowOverflow = true
  arrowEnumeratorGenerator = false
  closeParenSite = false
  multiline = false
  openParenCallSite = false
  openParenCtrlSite = false
  openParenDefnSite = false
  openParenTupleSite = false
  preset = "none"
  tokens = [
    { code = "%", owners = [{ regex = "Term.ApplyInfix" }] },
    { code = "%%", owners = [{ regex = "Term.ApplyInfix" }] },
    { code = ":=", owners = [{ regex = "Term.ApplyInfix" }] },
    { code = "=>", owners = [{ regex = "Case" }] },
    { code = "=", owners = [{ regex = "Param" }] },
    { code = "<-", owners = [{ regex = "Enumerator.Generator" }] }
  ]
  treeCategory."Defn.Val" = "val/var"
  treeCategory."Defn.Var" = "val/var"
}

binPack {
  literalArgumentLists = true
  parentConstructors = "source"
  unsafeCallSite = "Never"
  unsafeDefnSite = "Never"
}

comments {
  wrap = "standalone"
  wrapStandaloneSlcAsSlc = true
}

danglingParentheses {
  callSite = true
  ctrlSite = true
  defnSite = true
  exclude = []
  tupleSite = true
}

docstrings {
  blankFirstLine = "yes"
  oneline = "fold"
  removeEmpty = true
  style = "SpaceAsterisk"
  wrap = "yes"
}

importSelectors = "binPack"
includeCurlyBraceInSelectChains = true
includeNoParensInSelectChains = true

indent {
  main = 2
  significant = null
  callSite = 2
  caseSite = 2
  commaSiteRelativeToExtends = 2
  ctorSite = 2
  ctrlSite = 2
  defnSite = 2
  extendSite = 2
  extraBeforeOpenParenDefnSite = 2
  withSiteRelativeToExtends = 0
}
indentOperator.topLevelOnly = false

literals {
  double = "Lower"
  float = "Lower"
  hexDigits = "Lower"
  hexPrefix = "Lower"
  long = "Upper"
  scientific = "Upper"
}

maxColumn = 100

newlines {
  afterCurlyLambdaParams = "squash"
  afterInfix = "many"
  afterInfixBreakOnNested = false
  afterInfixMaxCountPerFile = 1000
  alwaysBeforeElseAfterCurlyIf = false
  avoidAfterYield = true
  avoidForSimpleOverflow = ["slc"]
  avoidInResultType = true
  beforeCurlyLambdaParams = "multilineWithCaseOnly"
  beforeOpenParenDefnSite = null
  beforeOpenParenCallSite = null
  beforeMultiline = "unfold"
  beforeTemplateBodyIfBreakInParentCtors = true
  beforeTypeBounds = "unfold"
  forceBeforeMultilineAssign = "never"
  selectChains = "unfold"
  sometimesBeforeColonInMethodReturnType = false
  source = "unfold"
  topLevelBodyIfMinStatements = []
  topLevelBodyMinStatements = 1
  topLevelStatementBlankLines = [
    {
      minBreaks = 1,
      blanks {
        before = 1,
        after = 1,
        beforeAll = 0,
        afterAll = 0
      }
    }
  ]
  usingParamListModifierForce = ["before"] # Using this instead of usingParamListModifierPrefer = "before"
}

optIn {
  breakChainOnFirstMethodDot = false
  breaksInsideChains = false
  encloseClassicChains = true
  forceBlankLineBeforeDocstring = false
}

project.includePaths."+" = ["glob:**.md"]

rewrite {
  imports {
    expand = false
    sort = "original"
  }
  neverInfix {
    excludeFilters."+" = [
      "\\\|\\\|",$! We escape each | an extra 1 time due to giter8 requirements (desired output is \\|\\|) !$
      "&&",
      "\\\?\\\?",$! We escape each ? an extra 1 time due to giter8 requirements (desired output is \\?\\?) !$
      "%",
      "%%",
      "\\\^",$!     We escape each ^ an extra 1 time due to giter8 requirements (desired output is \\^) !$
      "\\\^\\\^",$! We escape each ^ an extra 1 time due to giter8 requirements (desired output is \\^\\^) !$
      "#",
      "##",
      "\\\\\$",$!      We escape each $ an extra 3 times due to giter8 requirements (desired output is \\$) !$
      "\\\\\$\\\\\$"$! We escape each $ an extra 3 times due to giter8 requirements (desired output is \\$\\$) !$
    ]
  }
  rules = [
    "AvoidInfix",
    "Imports",
    "PreferCurlyFors",
    "RedundantBraces",
    "RedundantParens",
    "SortModifiers"
  ]
  redundantBraces {
    ifElseExpressions = false
    includeUnitMethods = true
    generalExpressions = false
    maxLines = 1000
    methodBodies = true
    parensForOneLineApply = true
    stringInterpolation = true
  }
  scala3 {
    convertToNewSyntax = false # This must be false due to conflicts with the syntax SBT tolerates; someday when SBT supports Scala 3 syntax, change this to true
    removeOptionalBraces = "no"
  }
}
rewriteTokens = {
  "⇒": "=>",
  "→": "->",
  "←": "<-"
}

spaces {
  afterKeywordBeforeParen = true
  afterSymbolicDefs = false
  beforeContextBoundColon = "Always"
  inByNameTypes = true
  inImportCurlyBraces = false
  inInterpolatedStringCurlyBraces = false
  inParentheses = false
  neverAroundInfixTypes = []
}

trailingCommas = "never"

verticalMultiline {
  arityThreshold = 5
  atDefnSite = true
  excludeDanglingParens = [] # TODO - remove this argument once Scalafmt removes it (it is currently deprecated)
  newlineAfterOpenParen = true
}

xmlLiterals.assumeFormatted = false
